import { User } from "./User";
export interface UnreadMessage {
    lastMessage: Message;
}
export interface ConversationData {
    id: string;
    custom?: {
        [key: string]: string;
    };
    subject?: string;
    topicId?: string;
    photoUrl?: string;
    welcomeMessages?: Array<string>;
}
export interface Message {
    conversation: ConversationData;
    isByMe: boolean;
    senderId: string | null;
    sender: User | null;
    body: string;
    type: "media" | "text" | "location";
    timestamp: number;
    read: boolean;
}
export interface SentMessage {
    id: string | undefined;
    conversationId: string;
    type: "UserMessage" | "SystemMessage";
    readBy: string[];
    senderId: string;
    text?: string;
    origin: "web" | "rest" | "email" | "import";
    createdAt: string | undefined;
}
/**
 * Specifies access and notification settings for a given user's participation
 * to a given conversation. Used in [[ConversationBuilder.setParticipant]].
 */
export interface ParticipationSettings {
    access: "Read" | "ReadWrite";
    notify: boolean;
}
export interface Participant {
    readonly user: User;
    readonly participationSettings: Partial<ParticipationSettings>;
}
/**
 * Encapsulates an active conversation between two parties.
 *
 * Use this object to send system messages to the conversation or to
 * programmatically select a conversation by passing it to [[Inbox.select]].
 *
 * Don't construct Conversation objects directly. Instead, call [[Session.getOrStartConversation]].
 */
export interface Conversation extends ConversationData {
    readonly id: string;
    readonly internalId: string;
    participants: Array<Participant>;
    readonly topicId?: string;
    subject?: string;
    welcomeMessages?: Array<string>;
    custom?: {
        [name: string]: string;
    };
    photoUrl?: string;
}
/**
 * A Conversation Builder represents a conversation that is about to be created, fetched, or updated.
 * You can use this object to set up or modify a conversation before showing it.
 *
 * Note: any changes you make here will not be sent to TalkJS immediately.
 * Instead, instantiate a TalkJS UI using methods such as [[Session.createInbox]].
 *
 *
 */
export interface ConversationBuilder {
    readonly id: string;
    readonly internalId: string;
    participants: Array<Participant>;
    subject?: string;
    welcomeMessages?: Array<string>;
    custom?: {
        [name: string]: string;
    };
    photoUrl?: string;
    /**
     * Sets a participant of the conversation. This method is idempotent and can be called multiple times.
     * @param user A `User` object that identifies the person who is a participant of the conversation.
     * The user is uniquely identified by their id; all other fields (name, photo
     * etc) are overwritten in the TalkJS database each  time they change.
     * @param settings An optional setting of participation, can be an initial `access` right or if user should be notified.
     * {
     *   access?: "ReadWrite" | "Read",
     *   notify?: boolean
     * }
     */
    setParticipant(user: User, settings?: Partial<ParticipationSettings>): void;
    /**
     * Sets additional metadata of the conversation.
     * @param subject A human-readable subject
     *                of the conversation. Supports formatted links in a Markdown-style syntax, e.g.
     *                `Beautiful <https://yoursite.com/booking/18644|home by the sea>!`.
     *                URLs and email addresses are made clickable, and emojis made to work
     *                cross-platform.
     * @param custom Additional parameter to store the custom fields, that you want to use in the email template.  E.g.`custom.specialToken`
     * @param photoUrl Photo to be used for this conversation in the TalkJS UI in case there are more than 2 participants
     *                 (TalkJS shows the photo of the other participant in a 1-on-1 conversation)
     * @param welcomeMessages Welcome messages are messages which are sent at the beginning of a chat. In this case the messages will appear
     *                  as system messages.
     */
    setAttributes({ subject, photoUrl, welcomeMessages, custom }: Partial<ConversationAttributes>): void;
}
export interface ConversationAttributes {
    subject: string;
    photoUrl: string;
    custom: {
        [name: string]: string;
    };
    welcomeMessages: Array<string>;
}
