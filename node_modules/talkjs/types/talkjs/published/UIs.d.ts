import { SentMessage, ConversationData, Conversation, ConversationBuilder } from "./Domain";
import { User } from "./User";
import { PopupOptions, HtmlPanelOptions, InboxOptions, ConversationFilter } from "./UIOptions";
export interface ConversationSelectedEvent {
    me: User;
    other?: User;
    others?: Array<User>;
    conversation: ConversationData | null;
}
export interface DesktopNotificationToggledEvent {
    isEnabled: boolean;
}
export interface SendMessageEvent {
    message: SentMessage;
    me: User;
    conversation: ConversationData;
}
export interface FocusEvent {
}
export interface BlurEvent {
}
export interface JQuery {
    [index: number]: HTMLElement;
    length: number;
    jquery: string;
}
export interface UIBox {
    messageField: MessageField;
    on(eventType: "sendMessage", handler: (event: SendMessageEvent) => void): void;
    /**
     * Triggers when the chat UI gets focused (i.e. the user clicks/taps anywhere inside it)
     */
    on(eventType: "focus", handler: (event: FocusEvent) => void): void;
    /**
     * Triggers when the chat UI gets unfocused (i.e. the user clicks/taps anywhere outside it)
     */
    on(eventType: "blur", handler: (event: BlurEvent) => void): void;
    off(eventType: "sendMessage", handler: (event: SendMessageEvent) => void): void;
    off(eventType: "focus", handler: () => void): void;
    off(eventType: "blur", handler: () => void): void;
    createHtmlPanel(options: HtmlPanelOptions): Promise<HtmlPanel>;
    /**
     * Sets metadata for the current session.
     *
     * @param visible Manually sets the information about the visibility of TalkJS.
     * This is useful when TalkJS is hidden with CSS. TalkJS will assume that UIs
     * marked `visible: false` cannot be seen, and thus messages arriving on this UI will
     * not be marked as read until you set `visible` to true again.
     *
     * @param custom Additional parameter to store the custom fields, that you
     * may want to use in the REST API call.
     */
    setPresence({ visible, custom }: {
        visible?: boolean;
        custom?: {
            [key: string]: string;
        };
    }): void;
    /**
     * **Deprecated**. This method will keep being supported, but for new projects,
     * we recommend that you use [[Session.setDesktopNotificationsEnabled]].
     *
     * Sets desktop notification on or off. Has the same effect as toggling the
     * "Desktop notification" toggle in the TalkJS Inbox UI. Use this function to replicate that
     * toggle elsewhere in your UI if you're using TalkJS in a mode that doesn't show this toggle.
     *
     * @returns void
     *
     */
    toggleDesktopNotifications(isEnabled: boolean): void;
    /**
     * Destroys an inbox and removes all event listeners it has running. Call this before removing the inbox
     * container from the DOM.
     */
    destroy(): void;
}
/**
 * A messaging UI for just a single conversation
 *
 * There is no way for the user to switch between conversations
 * (but you can change the active conversation through [[Chatbox.select]]).
 * Create a Chatbox through [[Session.createChatbox]] and then call
 * [[Chatbox.mount]] to show it.
 */
export interface Chatbox extends UIBox {
    /**
     * Switches the active conversation the conversation identified by
     * `conversation`, which can be either a [[Conversation]] object or a TalkJS
     * conversation id.
     */
    select(conversation: string | Conversation | ConversationBuilder): void;
    /**
     * Renders the UI inside a DOM element specified by `container`. `container`
     * must either be a DOM Element (as returned by e.g. `document.getElementById`) or
     * a JQuery object with a single element.
     */
    mount(container: HTMLElement | JQuery | null): Promise<void>;
    /**
     * Destroys the chatbox. Call this before removing the chatbox
     * container from the DOM.
     */
    destroy(): void;
}
export interface OpenEvent {
}
export interface CloseEvent {
}
/**
 * A messaging UI for just a single conversation.
 *
 * There is no way for the user to switch between conversations
 * (but you can change the active conversation through [[Popup.select]]).
 * Create a Popup through [[Session.createPopup]] and then call
 * [[Popup.mount]] to show it.
 */
export interface Popup extends UIBox {
    mount(options?: {
        show?: boolean;
    }): Promise<void>;
    /**
     * Switches the active conversation the conversation identified by
     * `conversation`, which can be either a [[Conversation]] object or a TalkJS
     * conversation id.
     */
    select(conversation: string | Conversation | ConversationBuilder, options?: PopupOptions): void;
    /**
     * Destroys the Popup. Call this before removing the Popup
     * container from the DOM.
     */
    destroy(): void;
    /**
     * Shows the Popup, previously hidden or mounted with a parameter `show: false`
     */
    show(): void;
    /**
     * Closes the Popup, but doesn't remove it from the DOM
     */
    hide(): void;
    on(eventType: "open", handler: (event: OpenEvent) => void): void;
    on(eventType: "close", handler: (event: CloseEvent) => void): void;
    on(eventType: "sendMessage", handler: (event: SendMessageEvent) => void): void;
    /**
     * Triggers when the chat UI gets focused (i.e. the user clicks/taps anywhere inside it)
     */
    on(eventType: "focus", handler: (event: FocusEvent) => void): void;
    /**
     * Triggers when the chat UI gets unfocused (i.e. the user clicks/taps anywhere outside it)
     */
    on(eventType: "blur", handler: (event: BlurEvent) => void): void;
    off(eventType: "open", handler: (event: OpenEvent) => void): void;
    off(eventType: "close", handler: (event: CloseEvent) => void): void;
    off(eventType: "sendMessage", handler: (event: SendMessageEvent) => void): void;
    off(eventType: "focus", handler: () => void): void;
    off(eventType: "blur", handler: () => void): void;
}
/**
 * The main messaging UI. Chats on the left, messages on the right.
 * Create an Inbox through [[Session.createInbox]] and then call [[Inbox.mount]] to show it.
 */
export interface Inbox extends UIBox {
    /**
     * Switches the active conversation the conversation identified by
     * `conversation`, which can be either a [[Conversation]] object or a TalkJS
     * conversation id.
     */
    select(conversation: string | Conversation | ConversationBuilder, options?: InboxOptions): void;
    /**
     * Used to control which conversations are shown in the conversation feed, depending on access
     * level, custom conversation attributes or message read status.
     *
     * See [[ConversationFilter]] for all available options.
     *
     * You can also set the filter in [[Session.createInbox]] using [[InboxOptions.feedFilter]].
     */
    setFeedFilter(filter: ConversationFilter): void;
    /**
     * Renders the UI inside a DOM element specified by `container`. `container`
     * must either be a DOM Element (as returned by e.g. `document.getElementById`) or
     * a JQuery object with a single element.
     */
    mount(container: HTMLElement | JQuery | null): Promise<void>;
    on(eventType: "conversationSelected", handler: (event: ConversationSelectedEvent) => void): void;
    on(eventType: "desktopNotificationToggled", handler: (event: DesktopNotificationToggledEvent) => void): void;
    on(eventType: "sendMessage", handler: (event: SendMessageEvent) => void): void;
    /**
     * Triggers when the chat UI gets focused (i.e. the user clicks/taps anywhere inside it)
     */
    on(eventType: "focus", handler: (event: FocusEvent) => void): void;
    /**
     * Triggers when the chat UI gets unfocused (i.e. the user clicks/taps anywhere outside it)
     */
    on(eventType: "blur", handler: (event: BlurEvent) => void): void;
    /**
     */
    off(eventType: "conversationSelected", handler: (event: ConversationSelectedEvent) => void): void;
    off(eventType: "desktopNotificationToggled", handler: (event: DesktopNotificationToggledEvent) => void): void;
    off(eventType: "sendMessage", handler: (event: SendMessageEvent) => void): void;
    off(eventType: "focus", handler: () => void): void;
    off(eventType: "blur", handler: () => void): void;
    /**
     * Destroys an inbox and removes all event listeners it has running. Call this before removing the inbox
     * container from the DOM.
     */
    destroy(): void;
}
/**
 * HTML Panel
 * HTML panels should only be created through [[Inbox.createHtmlPanel]], [[Chatbox.createHtmlPanel]] or [[Popup.createHtmlPanel]].
 */
export interface HtmlPanel {
    /**
     * Shows the panel if it's hidden.
     */
    show(): void;
    /**
     * Hide the panel if it's visible.
     */
    hide(): void;
    /**
     * Changes the panel height.
     * If you don't need to change the height after the panel is created, you can pass it as an option to the `createHtmlPanel`.
     */
    setHeight(height: number): void;
    /**
     * Returns `true` if the panel is visible, `false` if it's hidden or destroyed
     */
    isVisible(): boolean;
    /**
     * Removes the HTML panel
     */
    destroy(): void;
}
/**
 * Encapsulates the message entry field tied to the currently selected conversation.
 */
export interface MessageField {
    /**
     * Focuses the message entry field. Note that on mobile devices, this will cause the on-screen
     * keyboard to pop up, obscuring part of the screen.
     */
    focus(): void;
    /**
     * Sets the message entry field to `text`.
     *
     * Useful if you want to guide your user with message suggestions. If you want to start a UI
     * with a given text showing immediately, consider passing [[InboxOptions.messageSuggestion]] to
     * [[Session.createInbox]] (or `createPopup` or `createChatbox`).
     */
    setText(text: string): void;
}
