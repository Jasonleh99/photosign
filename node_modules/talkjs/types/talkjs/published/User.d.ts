/**
 * A user of your app. This is a vanilla JavaScript object with no behavior.
 * TalkJS uses `id` to uniquely identify this user. All other fields are allowed to vary
 * over time and the TalkJS database will update its fields accordingly.
 */
export declare class User {
    readonly id: string;
    readonly internalId: string;
    readonly name: string;
    readonly email?: string | Array<string> | null;
    readonly phone?: string | Array<string> | null;
    readonly welcomeMessage?: string;
    readonly photoUrl?: string;
    readonly role?: string;
    readonly configuration?: string;
    readonly custom?: {
        [name: string]: string;
    };
    readonly availabilityText?: string;
    readonly locale?: string;
    private readonly __sync;
    /**
     * Creates a User object without any user data. Use this constructor if you're sure
     * that a user by the given `id` already exists in TalkJS (for instance, because you
     * synchronized it via the REST API).
     */
    constructor(id: string | number);
    /**
     * Use this constructor to synchronize user data with the TalkJS backend.
     *
     * The fields `id`, `name` and `email` are required.
     * A warning will be emitted if `configuration` is not specified.
     *
     * Set `email` to `null` if you want to use TalkJS without email fallback.
     */
    constructor({ id, name, email, phone, photoUrl, welcomeMessage, role, configuration, custom, availabilityText, locale }: {
        id: string | number;
        name: string;
        email?: string | Array<string> | null;
        phone?: string | Array<string> | null;
        photoUrl?: string;
        welcomeMessage?: string;
        role?: string;
        configuration?: string;
        custom?: {
            [name: string]: string;
        };
        availabilityText?: string;
        locale?: string;
    });
    constructor(args: {
        id: string;
        internalId: string;
        name: string;
        email?: string | Array<string> | null;
        phone?: string | Array<string> | null;
        photoUrl?: string;
        welcomeMessage?: string;
        role?: string;
        configuration?: string;
        custom?: {
            [name: string]: string;
        };
        availabilityText?: string;
        locale?: string;
    }, isInternal: true);
}
